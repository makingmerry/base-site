// # grid
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

@function generate-column-selectors($column-count) {
  $result: ();
  @for $i from 1 through $column-count {
    $result: append($result, 'col-#{$i}', 'comma');
  }
  @return $result;
}

@function generate-column-declarations($column-count) {
  $result: ();
  @for $i from 1 through $column-count {
    $width: unquote((100 / ($column-count / $i)) + "%");
    $result: append($result, (
      'flex': 0 1 $width,
      'max-width': $width,
    ), 'comma');
  }
  @return $result;
}

@mixin grid($column-count) {
  $column-selectors: generate-column-selectors($column-count);
  $column-declarations: generate-column-declarations($column-count);

  .g-#{$column-count} {
    display: flex;
    flex-flow: row wrap;

    @include responsive-rule-set($column-selectors, $column-declarations);
  }
}

@include grid(10);

// # modifiers
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

//////////////////////////////
// # justify content
//////////////////////////////
@include responsive-rule-set((
  'g-justify-start',
  'g-justify-end',
  'g-justify-center',
  'g-justify-s-between',
  'g-justify-s-around',
), (
  ('justify-content': flex-start),
  ('justify-content': flex-end),
  ('justify-content': center),
  ('justify-content': space-between),
  ('justify-content': space-around),
));

//////////////////////////////
// # align items
//////////////////////////////
@include responsive-rule-set((
  'g-align-start',
  'g-align-end',
  'g-align-center',
  'g-align-stretch',
  'g-align-baseline',
), (
  ('align-items': flex-start),
  ('align-items': flex-end),
  ('align-items': center),
  ('align-items': stretch),
  ('align-items': baseline),
));