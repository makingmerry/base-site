// # rule set builder
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

// # @mixin rule-set($selector, $declarations, $selector-modifier: "")
// 
// Form a rule set by adding declarations to a selector
// 
// @param `string`: $selector         : Class name selector
// @param `map`   : $declarations     : Map containing property to value pairs
// @param `string`: $selector-modifier: Modifier string to attach to end of selector
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
@mixin rule-set($selector, $declarations, $selector-modifier: "") {
  // no modifiers (default)
  @if $selector-modifier == "" {
    .#{$selector} {
      @each $property, $value in $declarations {
        #{$property}: #{$value};
      }
    }
  // modified
  } @else {
    .#{$selector}--#{$selector-modifier} {
      @each $property, $value in $declarations {
        #{$property}: #{$value};
      }
    }
  }
}

// # @mixin responsive-rule-set($selector, $declarations)
// 
// Form identical rule sets replicated for varying media sizes
// 
// @param `list`: $selectors   : List of class name selectors
// @param `list`: $declarations: List of declaration maps to embed within selectors
// 
// * Number of selectors must match number of declarations
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
@mixin responsive-rule-set($selectors, $declarations) {
  @each $size, $breakpoint in $screen-sizes {
    // base size
    @if $size == 'base' {
      @each $selector in $selectors {
        $i: index($selectors, $selector);
        @include rule-set($selector, nth($declarations, $i));
      }
    // media sizes
    } @else {
      @media (min-width: $breakpoint) {
        @each $selector in $selectors {
          $i: index($selectors, $selector);
          @include rule-set($selector, nth($declarations, $i), $size);
        }
      }
    }
  }
}

// # @function list-ordered-selectors
// 
// Returns an ordered list of selector class names
// Each selector class name consists of the same prefix indexed with a number
// 
// @param  `string`:  $prefix    : Abbreviations for prefixing selector class names
// @param  `number`:  $length    : List length
// @param  `boolean`: $reverse   : Ascending(default) or descending order
// @param  `boolean`: $zero-index: Start at 1 index(default) or 0
// @return `list` of `string`s
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
@function list-ordered-selectors($prefix, $length, $reverse: false, $zero-index: false) {
  $result: ();
  // descending order
  @if $reverse == true {
    @for $i from $length through 1 {
      $n: $i;
      @if ($zero-index == true) { $n: $i - 1; }
      $result: append($result, #{$prefix}-#{$n}, 'comma'); 
    }
  // ascending order
  } @else {
    @for $i from 1 through $length {
      $n: $i;
      @if ($zero-index == true) { $n: $i - 1; }
      $result: append($result, #{$prefix}-#{$n}, 'comma'); 
    }
  }
  @return $result;
};

// # @function list-quality-selectors
// 
// Returns a list of selector class names
// consisting of the same prefix modified with a "quality"
// 
// @param  `string`:  $prefix   : Abbreviations for prefixing selector class names
// @param  `list`  :  $qualities: List of qualities to modify prefix with
// @return `list` of `string`s
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
@function list-quality-selectors($prefix, $qualities) {
  $result: ();
  @each $quality in $qualities {
    $result: append($result, (
      '#{$prefix}-#{$quality}'
    ), 'comma');
  }
  @return $result;
};

// # @function map-declarations
//
// Pairs a defined property with a list of values
// to form a map of single-line declarations
//
// @param  `string`: $property: Property string
// @param  `list`  : $values  : List of values to attach to property
// @return `map` of `maps`
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
@function map-declarations($property, $values) {
  $result: ();
  @each $value in $values {
    $result: append($result, (
      $property: $value 
    ), 'comma');
  }
  @return $result;
};

// # @function list-declaration-blocks
//
// Form list of declaration blocks from
// zipped-lists* of declaration maps
//
// @param  `list`: $list  : Zipped-List* of mapped declarations
// @return `list` of `map`s
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
@function list-declaration-blocks($list) {
  $result: ();
  @each $declarations in $list {
    $declaration-block: ();
    @each $declaration in $declarations {
      $declaration-block: map-merge($declaration-block, $declaration);
    }
    $result: append($result, $declaration-block, 'comma');
  }
  @return $result;
};