// # rule set builder
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

// # @function make-RSON($config-map, $selector-prefix, $properties)
// 
// Returns an RSON list for generating rulesets
// with 'ruleset makers'
// e.g.RSON pattern:
// (
//   (
//     'selector': '.red-box',
//     'declarations': (
//       display: block,
//       background-color: red,
//     ),
//   ),
//   ...
// )
// 
// @param `map`        : $config-map     : Map of modifier keys to declaration value pairs
// @param `string`     : $selector-prefix: Identity part of selector name,
//                                         merges with modifier key (from $config-map) to
//                                         form a full selector string
// @param `string/list`: $properties     : String or list of property(s) to imbue ruleset:
//                                         - String pairs with value (from $config-map)
//                                         - List items are paired with the same value
//                                         to form declaration blocks
// @return `list`
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
@function make-RSON($config-map, $selector-prefix, $properties) {
  $result: ();
  // generate objects from each config line
  @each $key, $value in $config-map {
    // generate single object's declaration block by
    // merging property 'keys' and config 'values'
    $declaration-block: ();
    @each $property in $properties {
      $declaration-block: map-merge($declaration-block, ($property: $value));
    }
    // input arguments into notation and add to list
    $result: append($result, (
      'selector': '#{$selector-prefix}-#{$key}',
      'declarations': $declaration-block,
    ), 'comma');
  }
  @return $result;
}

// # @mixin make-ruleset($type-note, $selector, $declarations, $selector-mod: '')
// 
// Form a single ruleset by imbueing declarations to a selector name,
// optional name modifications can be attached to end of selector name
// 
// @param `string`: $selector    : Name string prefixed with type-notation
//                                 (e.g. '.' for Class, '#' for Id)
// @param `map`   : $declarations: Map containing property to value pairs
// @param `string`: $selector-mod: (Optional) string to modify selector name
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
@mixin make-ruleset($selector, $declarations, $selector-mod: '') {
  @if $selector-mod != '' {
    $selector: $selector + '--' + $selector-mod;
  }
  #{$selector} {
    @each $property, $value in $declarations {
      #{$property}: #{$value};
    }
  }
};

// # @mixin make-rulesets($RSON, $selector-mod: '')
// 
// Form mulitple rulesets from a RSON list
// - Utilises @mixin make-ruleset
// 
// @param `list`  : $RSON: RSON list containing ruleset data to form full rulesets
// @param `string`: $selector-mod: (Optional) string to modify all selectors in RSON list
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
@mixin make-rulesets($RSON, $selector-mod: '') {
  @each $obj in $RSON {
    $i: index($RSON, $obj);
    $ruleset: nth($RSON, $i);
    $selector: map-get($ruleset, 'selector');
    $declarations: map-get($ruleset, 'declarations');
    @include make-ruleset($selector, $declarations, $selector-mod);
  }
}

// # @mixin make-responsive-rulesets($RSON, $screen-sizes: $screen-sizes)
// 
// Form a class ruleset by adding declarations or name modifications to a selector name
// 
// @param `list`: $RSON: RSON list containing ruleset data to form full rulesets
// @param `map` : $screen-sizes: (Optional) map of screen-size size to breakpoint pairs
//                               to generate media query rulesets with,
//                               defaults to $screen-sizes map listed in _configuration
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
@mixin make-responsive-rulesets($RSON, $screen-sizes: $screen-sizes) {
  @include make-rulesets($RSON);
  @each $size, $breakpoint in $screen-sizes {
    @media (min-width: $breakpoint) {
      @include make-rulesets($RSON, $size);
    }
  }
}