// # grid
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

// # @function map-column-widths($column-count)
//
// Returns a map of index 'key' to percentage width 'value' pairs
//
// @param `number`: $column-count: Number to get index and associated widths
// @return `map`
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
@function map-column-widths($column-count) {
  $result: ();
  @for $i from 1 through $column-count {
    $width: 100 / ($column-count / $i) + '%';
    $result: map-merge($result, ('#{$i}': $width));
  }
  @return $result;
}

// # @function make-grid-RSON($column-counts...)
//
// Returns a RSON list for grid columns ruleset generation
//
// @param `number`(s): $column-counts: Number(s) of columns formed in grid(s)
// @return `list`
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
@function make-grid-RSON($column-counts...) {
  $result: ();
  @each $column-count in $column-counts {
    $column-widths: map-column-widths($column-count);
    $grid-RSON: make-RSON($column-widths, '.g-#{$column-count}', ('flex-basis', 'max-width'));
    $result: join($result, $grid-RSON, 'comma');
  }
  @return $result;
}

@include make-responsive-rulesets(
  make-grid-RSON($grids...)
);