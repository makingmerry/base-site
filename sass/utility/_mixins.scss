// # mixins
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////
// # material shadow
//////////////////////////////
/// Gives a card depth effect.
/// @param {Number} $depth - depth level (between 1 and 5)
/// @link http://www.google.com/design/spec/layout/layout-principles.html#layout-principles-dimensionality Google Design
/// @requires {function} top-shadow
/// @requires {function} bottom-shadow
@mixin card($depth) {
  @if $depth < 1 {
    box-shadow: none;
  } @else if $depth > 5 {
    @warn "Invalid $depth `#{$depth}` for mixin `card`.";
  } @else {
    box-shadow: bottom-shadow($depth), top-shadow($depth);  
  }
}

/// Computes a top-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function top-shadow($depth) {
  $primary-offset: nth(1.5 3 10 14 19, $depth) * 1px;
  $blur: nth(1.5 3 10 14 19, $depth) * 4px;
  $color: rgba($base, nth(.12 .16 .19 .25 .30, $depth));

  @return 0 $primary-offset $blur $color;
}

/// Computes a bottom-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function bottom-shadow($depth) {
  $primary-offset: nth(1.5 3 6 10 15, $depth) * 1px;
  $blur: nth(1 3 3 5 6, $depth) * 4px;
  $color: rgba($base, nth(.24 .23 .23 .22 .22, $depth));

  @return 0 $primary-offset $blur $color;
}

//////////////////////////////
// # flexbox
//////////////////////////////
@mixin flexbox($val:null) {
  display: -webkit-box $val;
  display: -moz-box $val;
  display: -ms-flexbox $val;
  display: -webkit-flex $val;
  display: flex $val;
}

@mixin flex-flow($val) {
  -moz-flex-flow: $val;
  -webkit-flex-flow: $val;
  -ms-flexbox-flow: $val;
  -webkit-flex-flow: $val;
  -ms-flex-flow: $val;
  flex-flow: $val;
}

@mixin align-items($val) {
  -moz-box-align: $val;
  -webkit-box-align: $val;
  -webkit-align-items: $val;
  -ms-flex-align: $val;
  align-items: $val;
}

@mixin align-content($val) {
  -moz-box-align-content: $val;
  -ms-flex-align-content: $val;
  -webkit-box-align-content: $val;
  -webkit-align-content: $val;
  align-content: $val;
}

@mixin align-self($val) {
  -moz-box-align-self: $val;
  -ms-flex-align-self: $val;
  -webkit-box-align-self: $val;
  -webkit-align-self: $val;
  align-self: $val;
}

@mixin justify-content($val) {
  -moz-box-pack: $val;
  -webkit-box-pack: $val;
  -webkit-justify-content: $val;
  -ms-flex-pack: $val;
  justify-content: $val;
}

@mixin flex($values) {
  -webkit-box-flex: $values;
  -moz-box-flex:  $values;
  -webkit-flex:  $values;
  -ms-flex:  $values;
  flex:  $values;
}

@mixin order($val) {
  -webkit-box-ordinal-group: $val;  
  -moz-box-ordinal-group: $val;     
  -ms-flex-order: $val;     
  -webkit-order: $val;  
  order: $val;
}

//////////////////////////////
// # perspective
//////////////////////////////
@mixin perspective($perspective) {
  -webkit-perspective: $perspective;
  -moz-perspective: $perspective;
  perspective: $perspective;
}

//////////////////////////////
// # border radius
//////////////////////////////
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
}

//////////////////////////////
// # transform
//////////////////////////////
@mixin transform($transforms) {
  -webkit-transform: $transforms;
  -moz-transform: $transforms;
  -ms-transform: $transforms;
  -o-transform: $transforms;
  transform: $transforms;
}

@mixin transform-style($transform-style) {
  -webkit-transform-style: $transform-style;
  -moz-transform-style: $transform-style;
  transform-style: $transform-style;
}

@mixin rotate($deg) {
  @include transform(rotate(#{$deg}deg));
}

@mixin scale($x, $y) {
  @include transform(scale($x, $y));
}

@mixin translate($x, $y) {
  @include transform(translate($x, $y));
}

@mixin skew($x, $y) {
  @include transform(skew(#{$x}deg, #{$y}deg));
}

@mixin transform-origin($origin) {
  -webkit-transform-origin: $origin;
  -moz-transform-origin: $origin;
  -ms-transform-origin: $origin;
  -o-transform-origin: $origin;
  transform-origin: $origin;
}

//////////////////////////////
// # box shadow
//////////////////////////////
@mixin box-shadow($box-shadow) {
  -webkit-box-shadow: $box-shadow;
  -moz-box-shadow: $box-shadow;
  box-shadow: $box-shadow;
}

//////////////////////////////
// # transition
//////////////////////////////
@mixin transition($transition) {
  -webkit-transition: $transition;
  -moz-transition: $transition;
  -ms-transition: $transition;
  -o-transition: $transition;
  transition: $transition;
}